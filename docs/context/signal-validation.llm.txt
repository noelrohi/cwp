# Signal Validation Context

## System Overview

Embedding-based personalization system with two phases:

1. **Phase 1 (0-9 saves)**: Pure random signals for cold-start training
2. **Phase 2 (10+ saves)**: Cosine similarity to user's centroid (average of saved embeddings)

## Key Concepts

**Centroid**: Average embedding vector of all saved chunks. Represents user preference in embedding space.

**Relevance Score**: Raw cosine similarity between chunk embedding and user centroid. Range: 0 to 1 (higher = more similar).

**Separation**: Gap between saved content similarity vs random content similarity. Good separation (>50%) means ranking works.

**Stratified Sampling**: Distributes signals across score ranges so users can train on both good (high score) and bad (low score) examples. Skipping low-confidence signals reinforces that the system correctly identified bad content.

## Data Tables

**`saved_chunk`**: Source of truth for training data. Created when user saves content.

**`daily_signal`**: Tracks signal lifecycle (created → presented → saved/skipped). Used for UI.

**Always use `saved_chunk` for centroid calculations.**

## Validation Scripts

### check-user-stats.ts
```bash
pnpm tsx scripts/check-user-stats.ts <userId>
```
Shows: Total signals, saved/skipped/pending counts, save rate

### check-pending-signals.ts
```bash
pnpm tsx scripts/check-pending-signals.ts <userId>
```
Shows: Score distribution, top/bottom signals

**Good distribution**: Spread across 0-100% with more weight toward high scores
**Bad distribution**: Everything clustered in one range

### validate-user-embeddings.ts
```bash
pnpm tsx scripts/validate-user-embeddings.ts <userId>
```
Shows: Pairwise similarity, saved→centroid, random→centroid, separation score

**Good results**:
- Saved→centroid: 65-80%
- Random→centroid: 30-50%
- Separation: >50%

### analyze-saved-content.ts
```bash
pnpm tsx scripts/analyze-saved-content.ts <userId>
```
Shows: Full saved chunks, scores, keyword analysis

### find-and-test-signal.ts
```bash
pnpm tsx scripts/find-and-test-signal.ts "<keyword>"
```
Searches signals and tests scoring accuracy

## Key Files

**`src/inngest/functions/daily-intelligence-pipeline.ts`**
- Line 526-534: Phase 1 (random) vs Phase 2 (similarity)
- Line 538-549: Centroid calculation from saved_chunk table
- Line 570-590: Cosine similarity scoring
- Line 604-643: Stratified sampling for signal selection

**`src/inngest/functions/continuous-learning.ts`**
- Line 72-82: Creates saved_chunk when user saves

**`src/server/trpc/routers/signals.ts`**
- Line 871: validationMetrics endpoint (powers /debug page)

## Common Issues

### High scores but irrelevant content
**Cause**: User saved diverse content early, centroid is too broad
**Fix**: Save more focused content to refine centroid

### No score distribution (all clustered)
**Cause**: Stratified sampling disabled or broken
**Fix**: Check filterRankedChunks() in daily-intelligence-pipeline.ts

### Low separation (<30%)
**Cause**: Not enough training data or embeddings broken
**Fix**: Check embeddings exist, ensure 10+ saves

### No new signals
**Cause**: Time filter only includes last 2 days of chunks
**Fix**: Add new episodes or manually regenerate

## Success Criteria

- ✅ Separation score >50%
- ✅ Saved→centroid >65%
- ✅ Score distribution spread across ranges
- ✅ High scores correlate with user preferences
- ✅ User save rate 5-20%

## Quick Validation

```bash
# Full check
pnpm tsx scripts/check-user-stats.ts <userId>
pnpm tsx scripts/validate-user-embeddings.ts <userId>
pnpm tsx scripts/check-pending-signals.ts <userId>

# Or use web UI
# Navigate to /debug
```
